services:
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # User Service
  user-app:
    build: ./backend/user-service
    container_name: user-app
    volumes:
      - ./backend/user-service:/var/www
    networks:
      - microservices-net
    depends_on:
      user-db:
        condition: service_healthy
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=user-db
      - DB_DATABASE=user_service_db
      - DB_USERNAME=root
      - DB_PASSWORD=root

  user-web:
    image: nginx:stable-alpine
    container_name: user-web
    ports:
      - "8001:80"
    volumes:
      - ./backend/user-service:/var/www
      - ./backend/user-service/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - microservices-net
    depends_on:
      - user-app

  user-db:
    image: mysql:8.0
    container_name: user-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_service_db
    ports:
      - "3307:3306"
    volumes:
      - user-data:/var/lib/mysql
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Order Service
  order-app:
    build: ./backend/order-service
    container_name: order-app
    volumes:
      - ./backend/order-service:/var/www
    networks:
      - microservices-net
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=order-db
      - DB_DATABASE=order_service_db
      - DB_USERNAME=root
      - DB_PASSWORD=root
      - USER_SERVICE_URL=http://user-web
      - PRODUCT_SERVICE_URL=http://product-web
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - RABBITMQ_VHOST=/

  order-web:
    image: nginx:stable-alpine
    container_name: order-web
    ports:
      - "8002:80"
    volumes:
      - ./backend/order-service:/var/www
      - ./backend/order-service/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - microservices-net
    depends_on:
      - order-app

  order-db:
    image: mysql:8.0
    container_name: order-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_service_db
    ports:
      - "3308:3306"
    volumes:
      - order-data:/var/lib/mysql
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Product Service
  product-app:
    build: ./backend/product-service
    container_name: product-app
    volumes:
      - ./backend/product-service:/var/www
    networks:
      - microservices-net
    depends_on:
      product-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=product-db
      - DB_DATABASE=product_service_db
      - DB_USERNAME=root
      - DB_PASSWORD=root
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - RABBITMQ_VHOST=/

  # Product Queue Worker - SIMPLE ReduceProductStock
  product-queue-worker:
    build: ./backend/product-service
    container_name: product-queue-worker
    volumes:
      - ./backend/product-service:/var/www
    networks:
      - microservices-net
    depends_on:
      product-app:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      product-db:
        condition: service_healthy
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=product-db
      - DB_DATABASE=product_service_db
      - DB_USERNAME=root
      - DB_PASSWORD=root
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - RABBITMQ_VHOST=/
    command: >
      sh -c "
        echo 'üöÄ Starting Product Queue Worker...' &&
        sleep 15 &&
        composer dump-autoload &&
        php artisan config:clear &&
        php artisan cache:clear &&
        echo 'üìä Testing ReduceProductStock class...' &&
        php artisan tinker --execute='echo \"Class test: \" . (class_exists(\"App\\\\Jobs\\\\ReduceProductStock\") ? \"EXISTS\" : \"NOT FOUND\") . \"\\n\";' &&
        echo 'üê∞ Starting queue worker for ReduceProductStock...' &&
        php artisan queue:work rabbitmq --queue=product-stock-update --sleep=3 --tries=1 --timeout=60 --daemon --verbose
      "
    restart: unless-stopped

  product-web:
    image: nginx:stable-alpine
    container_name: product-web
    ports:
      - "8003:80"
    volumes:
      - ./backend/product-service:/var/www
      - ./backend/product-service/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - microservices-net
    depends_on:
      - product-app

  product-db:
    image: mysql:8.0
    container_name: product-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: product_service_db
    ports:
      - "3309:3306"
    volumes:
      - product-data:/var/lib/mysql
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Service
  frontend-app:
    build: ./frontend
    container_name: frontend-app
    volumes:
      - ./frontend:/var/www
    networks:
      - microservices-net
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - USER_SERVICE_URL=http://user-web
      - PRODUCT_SERVICE_URL=http://product-web
      - ORDER_SERVICE_URL=http://order-web
      - HASURA_GRAPHQL_URL=http://hasura:8080/v1/graphql

  frontend-web:
    image: nginx:stable-alpine
    container_name: frontend-web
    ports:
      - "8000:80"
    volumes:
      - ./frontend:/var/www
      - ./frontend/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - microservices-net
    depends_on:
      - frontend-app

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.25.0
    container_name: hasura
    ports:
      - "8080:8080"
    depends_on:
      - hasura-postgres
    restart: always
    environment:
      # Hasura metadata database
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@hasura-postgres:5432/postgres
      # Enable console
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      # Enable dev mode for detailed errors
      HASURA_GRAPHQL_DEV_MODE: "true"
      # Admin secret for console access
      HASURA_GRAPHQL_ADMIN_SECRET: "hasura-admin-secret"
      # Enable logs
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log, query-log"
      # CORS configuration
      HASURA_GRAPHQL_CORS_DOMAIN: "*"
      # Database URLs for services
      USER_DB_URL: "postgres://postgres:postgrespassword@hasura-postgres:5432/user_service_db"
      ORDER_DB_URL: "postgres://postgres:postgrespassword@hasura-postgres:5432/order_service_db"
      PRODUCT_DB_URL: "postgres://postgres:postgrespassword@hasura-postgres:5432/product_service_db"
    volumes:
      - ./hasura/cors-config.yaml:/etc/hasura/cors-config.yaml
    networks:
      - microservices-net

  # Hasura Metadata Database
  hasura-postgres:
    image: postgres:15
    container_name: hasura-postgres
    restart: always
    volumes:
      - hasura-data:/var/lib/postgresql/data
      - ./hasura/init-postgres-db.sh:/docker-entrypoint-initdb.d/init-postgres-db.sh
    environment:
      POSTGRES_PASSWORD: postgrespassword
      # Membuat database untuk masing-masing service
      POSTGRES_MULTIPLE_DATABASES: "user_service_db,order_service_db,product_service_db"
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8090:80"
    environment:
      PMA_HOSTS: user-db,order-db,product-db
      PMA_USER: root
      PMA_PASSWORD: root
    depends_on:
      - user-db
      - order-db
      - product-db
    networks:
      - microservices-net

volumes:
  user-data:
  order-data:
  product-data:
  rabbitmq_data:
  hasura-data:

networks:
  microservices-net:
    driver: bridge
